Our ISA is called "Ultimately Specific". It is designed based on the number of different instructions we have. We have a total of 43 different instructions represented
by their decimal value from 0-42.The philosophy behind this idea is create the most simplest and easiest ISA creatable to our knowledge. The only way to decipher the instruction
is to find its decimal value and figure it out from the table. We have a total of 128 possible different instructions (2^7) so reusing instructions within each program is encouraged. This
design is based off our previous project ISA that encouraged as little code lines as possible. This would increase efficiency within the code and decrease computation time. The cost
of such design is the complexity of our harware implementation.For now, we will not arrange instruction alphabetically to further increase the simlplicity 
of the machine code and Python. In other words, as the PC instruction value increases, so do the Decimal/Binary values unless branching to a previous instruction.The positive side is that
we use only 6 bits for both programs (limited with static Q = 17). ISA is without the parity bit but our machine code will include parity bit

Dec.	Binary/Machine code	Instr.					Description
0	0000000			lw   $7, P				# $7 = P
1	0000001			addi $9, $0, 1        			# $9 = 1
2	0000010			add  $10, $0, $0			# $10 = 0 = counter N = exponent
3	0000011			andi $10, $7, 1				# $10 = $7 and 1 (0/1)
4	0000100			srl  $7, $7, 1				# $7 >> 1
5	0000101			beq  $10, $0, Mult2			# if zero, go to Mult2 
6	0000110			add  $10, $9, $9   			# temp $10 = $9 + $9 = $ 10 = 2
7	0000111			add  $9, $9, $9				# $9 = $9 + $9 = $9 = 2
8	0001000			add  $9, $10, $9        		# $9 =  $10 + $9 = $9 = 6
9	0001001			beq  $10, $0, Mult4			# if zero, go to Mult2, check to multiply next bit by 4, else multiply by 2
10	0001010			beq  $10, $0, Mult16			# if zero, go to Mult2, check to multiply next bit by 16, else Mod 
11	0001011			beq  $10, $0, Mod			# if zero, go to Mult2, check to multiply next bit by 4, else multiply by 2
12	0001100			slti $10, $9, 17      			# if $9 < $8, $10 = 1, else $10 = 0, these next 3 lines will subtract by 17 until the is only the remainder
13	0001101			bne  $10, $0, End  			# if($10 =1) Save2, else cont          
14	0001110			subi $9, $9, 17 			# $9 = $9 -17 = 36 -17 = 19
15	0001111			j    Mod				# Will loop back to Mod to get remainder  
16	0010000			sw   $9, R				#Stores the remainder value into R
17	0010001			addi $5  $0, 0				# Counter i 
18	0010010			addi $7  $0, 0				# Counter J
19	0010011			addi $6  $0, 400			# stop value of array
20	0010100			beq  $5, $6, Exit			# if $5 = 400, Exit program
21	0010101			lw   $1, 0xC($0)			# $1 = T = Value to compare to / first Anded value
22	0010110			lw   $2, 0x2020($5)			# $2 = mem(0x2020 + $5)
23	0010111			addi $5, $5, 4				# Increment $5 for next array index
24	0011000			and  $1, $1, $2				# $1 = $1 and $2 = T and Array(i) = Anded value/rid of T to save on registers
25	0011001			addi $8  $0, 16				# stop value for bit #
26	0011010			beq  $7, $8, Save			# Once $7 equals 16, go to next array index
27	0011011			addi $7, $7, 1				# Increment $7 by 1
28	0011100			andi $2, $1, 1				# $2 = $1 and 1 = Anded value and 1, $2 is temp value
29	0011101			add  $3, $3, $2				# counts # of 1s in $1 (# of matching bits)
30	0011110			srl  $1, $1, 1				# $1 = $1 >> 1, reduces it by 1 bit till = 0
31	0011111			j    Compare				# now Compare with old values
32	0100000			lw   $1, 0x2010($0)			# reuse $1 = S
33	0100001			lw   $2, 0x2014($0)			# reuse $2 = C
34	0100010			slt  $6, $1, $3				# $6 = 1 if( $1(S) < $3), else $6 = 0
35	0100011			beq  $6, $0, Check1			# if (s>= $3 then $6 = 0) => if ($6 = 0) go to check 1, else continue
36	0100100			add  $1, $0, $3				# $1 = $3, $1 will now take highest value
37	0100101			addi $2, $0, 1				# $2(T) will be set to one since it's first highest value
38	0100110			sw   $1, 0x2010($0)			# mem(0x2010) = $1 = S
39	0100111			sw   $2, 0x2014($0)			# mem(0x2014) = $2 = T
40	0101000			j    Start				# start over/chech next array
41	0101001			beq  $1, $3, Check2			# if ($1 = $3) go to check 2, else continue
42	0101010			addi $2, $2, 1				# Increment 2(T) by 1 since matching count was found
